from Crypto.Util.number import inverse, long_to_bytes
import multiprocessing as mp

# Given values
n = 22052867210059985056723988324723437469643935229284382742545572507193384098102119262228001598529023654073757846310755124262636633869347982051002191511240379141051585596043583392443536537486511985566413114358501620593150325155980714427378089922768898334419054390129931556129883835862579370606862267536439488040273973837168042166190169509259514869605813849934412879327376082076832835805173922914432614662509276644729233158638994237998916272949330215708015931366306430206836771702005645140291164351968902134211930508335582704492675362575695821618037439189132191250206861088835015459823510074661891457866577589023776648751
c = 10190308328132298810370792830407498649727116694895887482897571470790876671909417379902577324803848850655954471082089060952194185721425541632970106409477409460179454591137511596832421737353754768175974443794887211632429320728354925107321000890255988379005072889707213292319847199584075893238735146835736979402380614028245390503793552296747076984394930725251632591625471426901314091323869057780461687871597918704838734422002502048443745431116004254026457663052173884656414629831184831431248595040967979335625485086150017379359647307566607127100190320972594606082853976569219798608787775461446205014804326191379628416459
p_top = 138398228938242977290956349154712526327465608129677172002562239407676097284597892604642541735116262199110899389173013415023231356739796256927576905061498760222434453315905920861684849512303589509164929424151033355318032546176479325956586655296074717479220347079941178337950508153135271887365359007
e = 0x10001

def check_candidate(x):
    candidate_p = (p_top << 40) + x
    if n % candidate_p == 0:
        return candidate_p
    return None

def main():
    print("[*] Starting parallel search...")
    with mp.Pool() as pool:
        for result in pool.imap_unordered(check_candidate, range(0, 1 << 20)):  # Start with 2^20 (1 million)
            if result:
                print("[+] Found p!")
                p = result
                q = n // p
                phi = (p - 1) * (q - 1)
                d = inverse(e, phi)
                m = pow(c, d, n)
                try:
                    print("[+] Decrypted:", long_to_bytes(m).decode())
                except:
                    print("[+] Decrypted raw:", long_to_bytes(m))
                pool.terminate()
                break

if __name__ == "__main__":
    main()
